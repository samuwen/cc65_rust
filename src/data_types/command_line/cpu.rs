use crate::errors::*;

const BINFMT_DEFAULT: u8 = 0; /* Default (binary) */
const BINFMT_BINARY: u8 = 1; /* Straight binary format */
const BINFMT_O65: u8 = 2; /* Andre Fachat's o65 format */
const BINFMT_ATARIEXE: u8 = 3; /* Standard Atari binary load */

static CTNone: [u8; 0x100] = [
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
  0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
  0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
  0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
  0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
  0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
  0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
  0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F,
  0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F,
  0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF,
  0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF,
  0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
  0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,
  0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
  0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF,
];

static CTAtari: [u8; 0x100] = [
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0xFD, 0x08, 0x7F, 0x9B, 0x0B, 0x7D, 0x0D, 0x0E, 0x0F,
  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
  0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
  0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
  0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
  0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
  0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
  0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
  0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F,
  0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F,
  0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF,
  0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF,
  0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
  0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,
  0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
  0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF,
];

static CTOSI: [u8; 0x100] = [
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
  0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
  0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
  0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
  0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
  0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
  0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7D, 0x7C, 0x7F, 0x7E,
  0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F,
  0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F,
  0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF,
  0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF,
  0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
  0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,
  0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
  0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF,
];

/* Translation table ISO-8859-1 -> PetSCII */
static CTPET: [u8; 0x100] = [
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x14, 0x09, 0x0D, 0x11, 0x93, 0x0A, 0x0E, 0x0F,
  0x10, 0x0B, 0x12, 0x13, 0x08, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
  0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
  0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
  0x40, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
  0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0x5B, 0xBF, 0x5D, 0x5E, 0xA4,
  0xAD, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
  0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0xB3, 0xDD, 0xAB, 0xB1, 0xDF,
  0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F,
  0x90, 0x91, 0x92, 0x0C, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F,
  0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF,
  0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF,
  0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
  0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
  0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
  0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF,
];

static PROPERTY_TABLE: [TargetProperties; 33] = [
  TargetProperties::new("none", CpuType::C6502, BINFMT_BINARY, CTNone),
  TargetProperties::new("module", CpuType::C6502, BINFMT_O65, CTNone),
  TargetProperties::new("atari2600", CpuType::C6502, BINFMT_BINARY, CTNone),
  TargetProperties::new("atari", CpuType::C6502, BINFMT_BINARY, CTAtari),
  TargetProperties::new("atari5200", CpuType::C6502, BINFMT_BINARY, CTAtari),
  TargetProperties::new("atarixl", CpuType::C6502, BINFMT_BINARY, CTAtari),
  TargetProperties::new("vic20", CpuType::C6502, BINFMT_BINARY, CTPET),
  TargetProperties::new("c16", CpuType::C6502, BINFMT_BINARY, CTPET),
  TargetProperties::new("c64", CpuType::C6502, BINFMT_BINARY, CTPET),
  TargetProperties::new("c128", CpuType::C6502, BINFMT_BINARY, CTPET),
  TargetProperties::new("plus4", CpuType::C6502, BINFMT_BINARY, CTPET),
  TargetProperties::new("cbm510", CpuType::C6502, BINFMT_BINARY, CTPET),
  TargetProperties::new("cbm610", CpuType::C6502, BINFMT_BINARY, CTPET),
  TargetProperties::new("osic1p", CpuType::C6502, BINFMT_BINARY, CTOSI),
  TargetProperties::new("pet", CpuType::C6502, BINFMT_BINARY, CTPET),
  TargetProperties::new("bbc", CpuType::C6502, BINFMT_BINARY, CTNone),
  TargetProperties::new("apple2", CpuType::C6502, BINFMT_BINARY, CTNone),
  TargetProperties::new("apple2enh", CpuType::C65C02, BINFMT_BINARY, CTNone),
  TargetProperties::new("geos-cbm", CpuType::C6502, BINFMT_BINARY, CTNone),
  TargetProperties::new("creativision", CpuType::C6502, BINFMT_BINARY, CTNone),
  TargetProperties::new("geos-apple", CpuType::C65C02, BINFMT_BINARY, CTNone),
  TargetProperties::new("lunix", CpuType::C6502, BINFMT_O65, CTNone),
  TargetProperties::new("atmos", CpuType::C6502, BINFMT_BINARY, CTNone),
  TargetProperties::new("telestrat", CpuType::C6502, BINFMT_BINARY, CTNone),
  TargetProperties::new("nes", CpuType::C6502, BINFMT_BINARY, CTNone),
  TargetProperties::new("supervision", CpuType::C65SC02, BINFMT_BINARY, CTNone),
  TargetProperties::new("lynx", CpuType::C65SC02, BINFMT_BINARY, CTNone),
  TargetProperties::new("sim6502", CpuType::C6502, BINFMT_BINARY, CTNone),
  TargetProperties::new("sim65c02", CpuType::C65C02, BINFMT_BINARY, CTNone),
  TargetProperties::new("pce", CpuType::CHUC6280, BINFMT_BINARY, CTNone),
  TargetProperties::new("gamate", CpuType::C6502, BINFMT_BINARY, CTNone),
  TargetProperties::new("c65", CpuType::C4510, BINFMT_BINARY, CTPET),
  TargetProperties::new("cx16", CpuType::C65C02, BINFMT_BINARY, CTPET),
];

#[derive(Clone)]
pub enum CpuType {
  Unknown, /* Not specified or invalid target */
  Nope,    /* No CPU - for assembler */
  C6502,
  C6502X, /* "Extended", that is: with illegal opcodes */
  C65SC02,
  C65C02,
  C65816,
  CSWEET16,
  CHUC6280, /* Used in PC engine */
  CM740,    /* Mitsubishi 740 series MCUs */
  C4510,    /* CPU of C65 */
}

impl CpuType {
  pub fn from_string(s: String) -> CpuType {
    match s.to_ascii_lowercase().as_ref() {
      "None" => CpuType::Nope,
      "6502" => CpuType::C6502,
      "6502x" => CpuType::C6502X,
      "65sc02" => CpuType::C65SC02,
      "65c02" => CpuType::C65C02,
      "65816" => CpuType::C65816,
      "sweet16" => CpuType::CSWEET16,
      "huc6280" => CpuType::CHUC6280,
      "m640" => CpuType::CM740,
      "4510" => CpuType::C4510,
      _ => unknown_option(&s),
    }
  }
}

pub enum MemoryModel {
  Near, // Code: near, data: near
  Far,  // Code: far, data: near
  Huge, // Code: far, data: far
}

impl MemoryModel {
  pub fn from_string(s: String) -> MemoryModel {
    match s.to_ascii_lowercase().as_ref() {
      "near" => MemoryModel::Near,
      "far" => MemoryModel::Far,
      "huge" => MemoryModel::Huge,
      _ => unknown_option(&s),
    }
  }
}

pub enum TargetSystem {
  Unknown,
  Nope,
  Module,
  Atari,
  Atari2600,
  Atari5200,
  Atarixl,
  Vic20,
  C16,
  C64,
  C128,
  Plus4,
  Cbm510,
  Cbm610,
  Osic1p,
  Pet,
  Bbc,
  Apple2,
  Apple2enh,
  GeosCbm,
  Creativision,
  GeosApple,
  Lunix,
  Atmos,
  Telestrat,
  Nes,
  Supervision,
  Lynx,
  Sim6502,
  Sim65c02,
  Pcengine,
  Gamate,
  C65,
  Cx16,
}

impl TargetSystem {
  pub fn from_string(s: String) -> TargetSystem {
    match s.to_ascii_lowercase().as_ref() {
      "unknown" => TargetSystem::Unknown,
      "nope" => TargetSystem::Nope,
      "module" => TargetSystem::Module,
      "atari" => TargetSystem::Atari,
      "atari2600" => TargetSystem::Atari2600,
      "atari5200" => TargetSystem::Atari5200,
      "atarixl" => TargetSystem::Atarixl,
      "vic20" => TargetSystem::Vic20,
      "c16" => TargetSystem::C16,
      "c64" => TargetSystem::C64,
      "c128" => TargetSystem::C128,
      "plus4" => TargetSystem::Plus4,
      "cbm510" => TargetSystem::Cbm510,
      "cbm610" => TargetSystem::Cbm610,
      "osic1p" => TargetSystem::Osic1p,
      "pet" => TargetSystem::Pet,
      "bbc" => TargetSystem::Bbc,
      "apple2" => TargetSystem::Apple2,
      "apple2enh" => TargetSystem::Apple2enh,
      "geos_cbm" => TargetSystem::GeosCbm,
      "creativision" => TargetSystem::Creativision,
      "geos_apple" => TargetSystem::GeosApple,
      "lunix" => TargetSystem::Lunix,
      "atmos" => TargetSystem::Atmos,
      "telestrat" => TargetSystem::Telestrat,
      "nes" => TargetSystem::Nes,
      "supervision" => TargetSystem::Supervision,
      "lynx" => TargetSystem::Lynx,
      "sim6502" => TargetSystem::Sim6502,
      "sim65c02" => TargetSystem::Sim65c02,
      "pcengine" => TargetSystem::Pcengine,
      "gamate" => TargetSystem::Gamate,
      "c65" => TargetSystem::C65,
      "cx16" => TargetSystem::Cx16,
      _ => unknown_option(&s),
    }
  }

  fn to_index(&self) -> usize {
    match self {
      TargetSystem::Unknown => 0,
      TargetSystem::Nope => 1,
      TargetSystem::Module => 2,
      TargetSystem::Atari => 3,
      TargetSystem::Atari2600 => 4,
      TargetSystem::Atari5200 => 5,
      TargetSystem::Atarixl => 6,
      TargetSystem::Vic20 => 7,
      TargetSystem::C16 => 8,
      TargetSystem::C64 => 9,
      TargetSystem::C128 => 10,
      TargetSystem::Plus4 => 11,
      TargetSystem::Cbm510 => 12,
      TargetSystem::Cbm610 => 13,
      TargetSystem::Osic1p => 14,
      TargetSystem::Pet => 15,
      TargetSystem::Bbc => 16,
      TargetSystem::Apple2 => 17,
      TargetSystem::Apple2enh => 18,
      TargetSystem::GeosCbm => 19,
      TargetSystem::Creativision => 20,
      TargetSystem::GeosApple => 21,
      TargetSystem::Lunix => 22,
      TargetSystem::Atmos => 23,
      TargetSystem::Telestrat => 24,
      TargetSystem::Nes => 25,
      TargetSystem::Supervision => 26,
      TargetSystem::Lynx => 27,
      TargetSystem::Sim6502 => 28,
      TargetSystem::Sim65c02 => 29,
      TargetSystem::Pcengine => 30,
      TargetSystem::Gamate => 31,
      TargetSystem::C65 => 32,
      TargetSystem::Cx16 => 33,
    }
  }
}

pub struct TargetProperties {
  name: &'static str,
  cpu_type: CpuType,
  binary_format: u8,
  char_map: [u8; 0x100],
}

impl TargetProperties {
  pub const fn new(
    name: &'static str,
    cpu_type: CpuType,
    binary_format: u8,
    char_map: [u8; 0x100],
  ) -> TargetProperties {
    TargetProperties {
      name,
      cpu_type,
      binary_format,
      char_map,
    }
  }

  pub fn get_default_cpu(&self) -> CpuType {
    self.cpu_type.clone()
  }
}

pub fn get_target_properties(target: &TargetSystem) -> &TargetProperties {
  &PROPERTY_TABLE[target.to_index()]
}
